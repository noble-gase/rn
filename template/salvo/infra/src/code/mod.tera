use kr::status::Status;
use kr::{define_error_codes, define_ok};
use salvo::{prelude::*, Depot, Request, Response, Writer};
use serde::Serialize;

define_ok!(0, "OK");

define_error_codes! {
    ErrParams(10000, "参数错误"),
    ErrAuth(20000, "未授权，请先登录"),
    ErrPerm(30000, "权限不足"),
    ErrEmpty(40000, "数据不存在"),
    ErrSystem(50000, "系统异常"),
    ErrData(60000, "数据异常"),
}

#[async_trait]
impl<T> Writer for OK<T>
where
    T: Serialize + Send,
{
    async fn write(mut self, _req: &mut Request, _depot: &mut Depot, resp: &mut Response) {
        resp.status_code(StatusCode::OK);
        resp.render(Json(self.to_status()));
    }
}

#[async_trait]
impl Writer for Code {
    async fn write(mut self, _req: &mut Request, _depot: &mut Depot, resp: &mut Response) {
        resp.status_code(StatusCode::OK);
        resp.render(Json(self.to_status()));
    }
}

pub type ApiResult<T> = Result<OK<T>, Code>;

