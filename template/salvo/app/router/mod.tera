pub mod route;

use prometheus::{Encoder, TextEncoder};
use salvo::{cors::Cors, handler, Router};

use shared;

pub fn init() -> Router {
    Router::new()
        .get(root)
        .push(Router::with_path("health").get(health))
        .push(Router::with_path("metrics").get(metrics))
        .push(router())
}

#[handler]
async fn root() -> &'static str {
    "â˜º welcome to Rust app"
}

#[handler]
async fn health() -> &'static str {
    "ok"
}

#[handler]
async fn metrics() -> String {
    let encoder = TextEncoder::new();
    let metric_families = prometheus::gather();

    let mut buffer = Vec::new();
    encoder.encode(&metric_families, &mut buffer).unwrap();

    String::from_utf8(buffer).unwrap()
}

pub fn router() -> Router {
    let cors = Cors::permissive()
        .expose_headers(vec![shared::middleware::trace::TRACE_ID])
        .into_handler();

    Router::new()
        .hoop(cors)
        .hoop(shared::middleware::metrics::Metrics)
        .hoop(shared::middleware::trace::Trace)
        .hoop(shared::middleware::log::Log)
        .hoop(shared::middleware::panic::Catch)
        .push(route::v1())
}

