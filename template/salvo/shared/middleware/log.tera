use std::collections::HashMap;

use http_body_util::BodyExt;
use hyper::HeaderMap;
use kr::times;
use salvo::{
    async_trait,
    http::{ReqBody, ResBody},
    writing::Json,
    Depot, FlowCtrl, Handler, Request, Response,
};
use serde_json::Value;

use crate::code::Code;

const MAX_BODY_LOG_SIZE: u64 = 20 << 10; // 20KB

#[derive(Default)]
pub struct Log;

impl Log {
    #[inline]
    pub fn new() -> Self {
        Log {}
    }
}

#[async_trait]
impl Handler for Log {
    async fn handle(
        &self,
        req: &mut Request,
        depot: &mut Depot,
        resp: &mut Response,
        ctrl: &mut FlowCtrl,
    ) {
        let enter_time = times::now(None);
        let req_method = req.method().to_string();
        let req_uri = req.uri().to_string();
        let req_header = header_to_string(req.headers());
        // 获取请求体
        let ((req_body, req_size), code) = drain_req_body(req).await;
        if let Some(v) = code {
            resp.render(Json(v.to_status()));
            ctrl.skip_rest();
            return;
        }
        ctrl.call_next(req, depot, resp).await;
        // 获取响应体
        let (resp_body, resp_size) = drain_resp_body(resp).await;
        let status = resp.status_code.unwrap_or_default().as_u16();
        // 请求时长
        let duration = (times::now(None) - enter_time).to_string();
        // 日志记录
        tracing::info!(
            method = req_method,
            uri = req_uri,
            headers = req_header,
            req_body = req_body,
            req_size = req_size,
            resp_body = resp_body,
            resp_size = resp_size,
            status = status,
            duration = duration,
            "request log"
        );
    }
}

#[allow(dead_code)]
fn header_to_string(h: &HeaderMap) -> String {
    let mut map: HashMap<String, Vec<String>> = HashMap::new();
    for k in h.keys() {
        let mut vals: Vec<String> = Vec::new();
        for v in h.get_all(k) {
            if let Ok(s) = v.to_str() {
                vals.push(s.to_string())
            }
        }
        map.insert(k.to_string(), vals);
    }
    serde_json::to_string(&map).unwrap_or_else(|_| String::from("<none>"))
}

async fn drain_req_body(req: &mut Request) -> ((Option<String>, u64), Option<Code>) {
    // 取出body
    let body = req.take_body();
    let bytes = match body.collect().await {
        Ok(v) => v.to_bytes(),
        Err(e) => {
            tracing::error!(err = ?e, "[request] body.collect");
            return ((None, 0), Some(Code::ErrSystem));
        }
    };
    // 判断大小并处理JSON
    let body_size = bytes.len() as u64;
    let body_str = if body_size > MAX_BODY_LOG_SIZE {
        Some(String::from("body too large"))
    } else {
        std::str::from_utf8(&bytes)
            .map(|s| {
                // 解析JSON字符串
                if let Ok(parsed_json) = serde_json::from_str::<Value>(s) {
                    // 将JSON数据格式化为紧凑的字符串
                    if let Ok(compact_json) = serde_json::to_string(&parsed_json) {
                        return compact_json;
                    }
                }
                s.to_string()
            })
            .ok()
    };
    // 重置body
    req.replace_body(ReqBody::Once(bytes));
    ((body_str, body_size), None)
}

async fn drain_resp_body(resp: &mut Response) -> (Option<String>, u64) {
    let body_size = resp.body.size().unwrap_or_default();
    if body_size > MAX_BODY_LOG_SIZE {
        return (Some(String::from("body too large")), body_size);
    }
    // 取出body
    let body = resp.take_body();
    let bytes = match body.collect().await {
        Ok(v) => v.to_bytes(),
        Err(e) => {
            tracing::error!(err = ?e, "[response] body.collect");
            return (None, body_size);
        }
    };
    let body_str = std::str::from_utf8(&bytes).map(|s| s.to_string()).ok();
    // 重置body
    resp.replace_body(ResBody::Once(bytes));
    (body_str, body_size)
}
