use std::sync::Arc;

use axum::{extract::State, Json};
use axum_extra::extract::WithRejection;
use validator::Validate;

use infra::{
    code::{rejection::IRejection, ApiResult, Code},
    core::AppState,
};

use crate::service::{
    self,
    greeter::{ReqHello, RespHello},
};

pub async fn hello(
    State(ctx): State<Arc<AppState>>,
    WithRejection(Json(req), _): IRejection<Json<ReqHello>>,
) -> ApiResult<RespHello> {
    if let Err(e) = req.validate() {
        return Err(Code::ErrParams.with_msg(e.to_string()));
    }
    service::greeter::hello(&ctx, req).await
}
