pub mod cmd;
pub mod handler;
pub mod router;
pub mod service;

use std::panic;

use clap::Parser;
use shared::core::{self, logger};

#[tokio::main]
async fn main() {
    let cli = cmd::Cli::parse();

    // load config
    core::load_config(&cli.config);
    // _guard 必须在 main 函数中才能使日志生效
    let _guard = logger::init();

    // catch panic
    panic::set_hook(Box::new(|info| {
        tracing::error!(error = %info, "panic occurred");
    }));

    init().await;
    if let Some(v) = cli.command {
        match v {
            cmd::Command::Hello { name } => cmd::hello::run(name),
            cmd::Command::Serve => cmd::serve::run().await,
        }
    }
    cleanup().await;
}

async fn init() {
    // 初始化数据库
    // db::init().await;
    // 初始化Redis
    // cache::init().await;
}

async fn cleanup() {
    // db::close().await;
}
