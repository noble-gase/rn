use std::collections::HashMap;

use axum::{
    body::Body,
    extract::Request,
    http::header::CONTENT_TYPE,
    middleware::Next,
    response::{IntoResponse, Response},
};
use http_body_util::BodyExt;
use hyper::HeaderMap;
use kr::times;
use serde_json::Value;

use crate::code::Code;

pub async fn handle(request: Request, next: Next) -> Response {
    let enter_time = times::now(None);
    let req_method = request.method().to_string();
    let req_uri = request.uri().to_string();
    let req_header = header_to_string(request.headers());
    // 获取body
    let (response, (req_body, resp_body)) = match drain_body(request, next).await {
        Err(e) => return e.into_response(),
        Ok(v) => v,
    };
    // 请求时长
    let duration = (times::now(None) - enter_time).to_string();
    tracing::info!(
        method = req_method,
        uri = req_uri,
        headers = req_header,
        req_body = req_body,
        resp_body = resp_body,
        duration = duration,
        "request log"
    );
    response
}

#[allow(dead_code)]
fn header_to_string(h: &HeaderMap) -> String {
    let mut map: HashMap<String, Vec<String>> = HashMap::new();
    for k in h.keys() {
        let mut vals: Vec<String> = Vec::new();
        for v in h.get_all(k) {
            if let Ok(s) = v.to_str() {
                vals.push(s.to_string())
            }
        }
        map.insert(k.to_string(), vals);
    }
    serde_json::to_string(&map).unwrap_or_else(|_| String::from("<none>"))
}

async fn drain_body(
    request: Request,
    next: Next,
) -> Result<(Response, (Option<String>, Option<String>)), Code> {
    let ok = match request
        .headers()
        .get(CONTENT_TYPE)
        .and_then(|value| value.to_str().ok())
    {
        Some(v) => {
            v.starts_with("application/json") || v.starts_with("application/x-www-form-urlencoded")
        }
        None => false,
    };
    if !ok {
        return Ok((next.run(request).await, (None, None)));
    }

    // 请求体
    let (req_parts, req_body) = request.into_parts();
    // this wont work if the body is a long running stream
    let req_bytes = match req_body.collect().await {
        Ok(v) => v.to_bytes(),
        Err(e) => {
            tracing::error!(err = ?e, "[request] body.collect");
            return Err(Code::ErrSystem);
        }
    };
    let req_body_str = std::str::from_utf8(&req_bytes)
        .map(|s| {
            // 解析JSON字符串
            if let Ok(parsed_json) = serde_json::from_str::<Value>(s) {
                // 将JSON数据格式化为紧凑的字符串
                if let Ok(compact_json) = serde_json::to_string(&parsed_json) {
                    return compact_json;
                }
            }
            s.to_string()
        })
        .ok();
    // 重置request
    let request = Request::from_parts(req_parts, Body::from(req_bytes));
    // 返回体
    let response = next.run(request).await;
    let (resp_parts, resp_body) = response.into_parts();
    // this wont work if the body is a long running stream
    let resp_bytes = match resp_body.collect().await {
        Ok(v) => v.to_bytes(),
        Err(e) => {
            tracing::error!(err = ?e, "[response] body.collect");
            return Err(Code::ErrSystem.with_msg(e.to_string()));
        }
    };
    let resp_body_str = std::str::from_utf8(&resp_bytes).map(|s| s.to_string()).ok();
    // 重置response
    let response = Response::from_parts(resp_parts, Body::from(resp_bytes));
    Ok((response, (req_body_str, resp_body_str)))
}
