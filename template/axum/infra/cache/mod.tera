mod redis_pool;

use std::sync::OnceLock;

static R: OnceLock<redis_pool::Pool> = OnceLock::new();
// static C: OnceLock<RedisClusterPool> = OnceLock::new();

pub async fn init() {
    let pool = redis_pool::new("redis")
        .await
        .unwrap_or_else(|e| panic!("Redis(redis) init failed: {}", e));
    let _ = R.set(pool);

    // cluster
    // let cluster_pool = redis_pool::new_cluster("redis-cluster")
    //     .await
    //     .unwrap_or_else(|e| panic!("Redis(redis-cluster) init failed: {}", e));
    // let _ = C.set(cluster_pool);
}

pub fn pool() -> &'static redis_pool::Pool {
    R.get().expect("Redis(redis) is not initialized")
}

// pub fn cluster_pool() -> &'static redis_pool::ClusterPool {
//     C.get().expect("Redis(redis-cluster) is not initialized")
// }
