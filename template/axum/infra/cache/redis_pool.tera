use std::time::Duration;

use kr::manager::{bb8_redis, bb8_redis_cluster};

use crate::config::config;

pub type Pool = bb8::Pool<bb8_redis::RedisConnectionManager>;
pub type ClusterPool = bb8::Pool<bb8_redis_cluster::RedisClusterManager>;

pub(super) async fn new(cfg_key: &str) -> anyhow::Result<Pool> {
    let cfg = config();

    let client = redis::Client::open(cfg.get_string(&format!("{}.dsn", cfg_key))?)?;
    let mut conn = client.get_connection()?;
    let _ = redis::cmd("PING").query::<String>(&mut conn)?;

    let max_size = cfg
        .get_int(&format!("{}.options.max_size", cfg_key))
        .unwrap_or(20);
    let min_idle = cfg.get_int("{}.options.min_idle").unwrap_or(10);
    let conn_timeout = cfg.get_int("{}.options.conn_timeout").unwrap_or(10);
    let idle_timeout = cfg.get_int("{}.options.idle_timeout").unwrap_or(300);
    let max_lifetime = cfg.get_int("{}.options.max_lifetime").unwrap_or(600);

    let pool = bb8::Pool::builder()
        .max_size(max_size as u32)
        .min_idle(Some(min_idle as u32))
        .connection_timeout(Duration::from_secs(conn_timeout as u64))
        .idle_timeout(Some(Duration::from_secs(idle_timeout as u64)))
        .max_lifetime(Some(Duration::from_secs(max_lifetime as u64)))
        .build(bb8_redis::RedisConnectionManager::new(client))
        .await?;

    Ok(pool)
}

#[allow(unused)]
pub(super) async fn new_cluster(cfg_key: &str) -> anyhow::Result<ClusterPool> {
    let cfg = config();

    let nodes = cfg
        .get_array(&format!("{}.nodes", cfg_key))?
        .into_iter()
        .map(|v| v.to_string())
        .collect::<Vec<String>>();
    let client = redis::cluster::ClusterClient::new(nodes)?;
    let mut conn = client.get_connection()?;
    let _ = redis::cmd("PING").query::<String>(&mut conn)?;

    let max_size = cfg
        .get_int(&format!("{}.options.max_size", cfg_key))
        .unwrap_or(20);
    let min_idle = cfg.get_int("{}.options.min_idle").unwrap_or(10);
    let conn_timeout = cfg.get_int("{}.options.conn_timeout").unwrap_or(10);
    let idle_timeout = cfg.get_int("{}.options.idle_timeout").unwrap_or(300);
    let max_lifetime = cfg.get_int("{}.options.max_lifetime").unwrap_or(600);

    let pool = bb8::Pool::builder()
        .max_size(max_size as u32)
        .min_idle(Some(min_idle as u32))
        .connection_timeout(Duration::from_secs(conn_timeout as u64))
        .idle_timeout(Some(Duration::from_secs(idle_timeout as u64)))
        .max_lifetime(Some(Duration::from_secs(max_lifetime as u64)))
        .build(bb8_redis_cluster::RedisClusterManager::new(client))
        .await?;

    Ok(pool)
}
