use sea_query::{
    DeleteStatement, Expr, InsertStatement, MysqlQueryBuilder, SelectStatement, UpdateStatement,
};
use sea_query_binder::SqlxBinder;
use sqlx::{mysql::MySqlRow, Error, FromRow, MySqlPool};

/// 插入记录
///
/// # Examples
///
/// ```
/// let stmt = Query::insert()
///     .into_table(table::Demo::Table)
///     .columns([table::Demo::Name])
///     .values_panic(["demo".into()])
///     .to_owned();
///
/// curd::create(db::pool(), stmt).await;
/// ```
pub async fn create(db: &MySqlPool, stmt: InsertStatement) -> Result<u64, Error> {
    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);

    let ret = sqlx::query_with(&sql, values).execute(db).await?;

    Ok(ret.last_insert_id())
}

/// 更新记录
///
/// # Examples
///
/// ```
/// let stmt = Query::update()
///     .table(table::Demo::Table)
///     .values([(table::Demo::Name, "demo".into())])
///     .and_where(Expr::col(table::Demo::Id).eq(1))
///     .to_owned();
///
/// curd::update(db::pool(), stmt).await;
/// ```
pub async fn update(db: &MySqlPool, stmt: UpdateStatement) -> Result<u64, Error> {
    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);

    let ret = sqlx::query_with(&sql, values).execute(db).await?;

    Ok(ret.rows_affected())
}

/// 删除记录
///
/// # Examples
///
/// ```
/// let stmt = Query::delete()
///     .from_table(table::Demo::Table)
///     .and_where(Expr::col(table::Demo::Id).eq(1))
///     .to_owned();
///
/// curd::delete(db::pool(), stmt).await;
/// ```
pub async fn delete(db: &MySqlPool, stmt: DeleteStatement) -> Result<u64, Error> {
    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);

    let ret = sqlx::query_with(&sql, values).execute(db).await?;

    Ok(ret.rows_affected())
}

/// 统计记录数
///
/// # Examples
///
/// ```
/// let stmt = Query::select()
///     .from(table::Demo::Table)
///     .and_where(Expr::col(table::Demo::Name).like("%demo%"))
///     .to_owned();
///
/// curd::count(db::pool(), stmt).await;
/// ```
pub async fn count(db: &MySqlPool, mut stmt: SelectStatement) -> Result<i64, Error> {
    stmt.clear_selects();
    stmt.clear_order_by();
    // SELECT COUNT(*)
    stmt.expr(Expr::cust("COUNT(*)"));

    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);
    let total: i64 = sqlx::query_scalar_with(&sql, values).fetch_one(db).await?;

    Ok(total)
}

/// 查询单条记录
///
/// # Examples
///
/// ```
/// let stmt = Query::select()
///     .from(table::Demo::Table)
///     .expr(Expr::cust("*"))
///     .and_where(Expr::col(table::Demo::Id).eq(1))
///     .to_owned();
///
/// curd::find_one::<model::Demo>(db::pool(), stmt).await;
/// ```
pub async fn find_one<T>(db: &MySqlPool, mut stmt: SelectStatement) -> Result<Option<T>, Error>
where
    T: for<'r> FromRow<'r, MySqlRow> + Send + Unpin,
{
    stmt.limit(1);

    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);

    let row = sqlx::query_as_with::<_, T, _>(&sql, values)
        .fetch_optional(db)
        .await?;

    Ok(row)
}

/// 查询多条记录
///
/// # Examples
///
/// ```
/// let stmt = Query::select()
///     .from(table::Demo::Table)
///     .expr(Expr::cust("*"))
///     .and_where(Expr::col(table::Demo::Name).like("%demo%"))
///     .to_owned();
///
/// curd::find_all::<model::Demo>(db::pool(), stmt).await;
/// ```
pub async fn find_all<T>(db: &MySqlPool, stmt: SelectStatement) -> Result<Vec<T>, Error>
where
    T: for<'r> FromRow<'r, MySqlRow> + Send + Unpin,
{
    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);

    let row = sqlx::query_as_with::<_, T, _>(&sql, values)
        .fetch_all(db)
        .await?;

    Ok(row)
}

/// 分页查询
///
/// # Examples
///
/// ```
/// let stmt = Query::select()
///     .from(table::Demo::Table)
///     .expr(Expr::cust("*"))
///     .and_where(Expr::col(table::Demo::Name).like("%demo%"))
///     .order_by(table::Demo::Id, Order::Desc)
///     .to_owned();
///
/// curd::paginate::<model::Demo>(db::pool(), stmt, 1, 10).await;
/// ```
pub async fn paginate<T>(
    db: &MySqlPool,
    mut stmt: SelectStatement,
    mut page: i32,
    mut size: i32,
) -> Result<(Vec<T>, i64), Error>
where
    T: for<'r> FromRow<'r, MySqlRow> + Send + Unpin,
{
    // 构建 count 查询
    let mut count = stmt.clone();
    count.clear_selects();
    count.clear_order_by();
    // SELECT COUNT(*)
    count.expr(Expr::cust("COUNT(*)"));

    // SQL日志
    tracing::info!(SQL = count.to_string(MysqlQueryBuilder));

    let (count_sql, count_values) = count.build_sqlx(MysqlQueryBuilder);
    let total: i64 = sqlx::query_scalar_with(&count_sql, count_values)
        .fetch_one(db)
        .await?;

    if total == 0 {
        return Ok((Vec::new(), total));
    }

    // 构建分页查询
    if page <= 0 {
        page = 1
    }
    if size <= 0 {
        size = 20
    }
    stmt.limit(size as u64).offset(((page - 1) * size) as u64);

    // SQL日志
    tracing::info!(SQL = stmt.to_string(MysqlQueryBuilder));

    let (sql, values) = stmt.build_sqlx(MysqlQueryBuilder);

    let row = sqlx::query_as_with::<_, T, _>(&sql, values)
        .fetch_all(db)
        .await?;

    Ok((row, total))
}
