use axum::{
    response::{IntoResponse, Response},
    Json,
};
use thiserror::Error;

use crate::status::ApiBody;

#[derive(Debug, Error)]
pub enum ApiErr {
    #[error("invalid parameters: {0}")]
    InvalidParams(String),

    #[error("unauthorized")]
    Unauthorized,

    #[error("{0} not found")]
    NotFound(String),

    #[error("panic occurred")]
    Panic,

    #[error("internal server error")]
    Internal(#[from] anyhow::Error),
}

impl ApiErr {
    // 映射到业务错误码
    pub fn code(&self) -> i32 {
        match self {
            ApiErr::InvalidParams(_) => 10000,
            ApiErr::Unauthorized => 20000,
            ApiErr::NotFound(_) => 40000,
            ApiErr::Panic => 50000,
            ApiErr::Internal(_) => 50000,
        }
    }
}

impl IntoResponse for ApiErr {
    fn into_response(self) -> Response {
        if let ApiErr::Internal(e) = &self {
            tracing::error!(error = ?e)
        }
        let body = ApiBody::<()> {
            code: self.code(),
            msg: self.to_string(),
            data: None,
        };
        Json(body).into_response()
    }
}
